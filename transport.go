// Copyright (c) 2014 Canonical Ltd.
// Licensed under the GPLv3, see the COPYING file for details.

package textsecure

import (
	"bytes"
	"crypto/tls"
	"crypto/x509"
	"io"
	"log"
	"net"
	"net/http"
)

var whispherKeyPin = []byte{0x30, 0x82, 0x1, 0x22, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0x82, 0x1, 0xf, 0x0, 0x30, 0x82, 0x1, 0xa, 0x2, 0x82, 0x1, 0x1, 0x0, 0xac, 0xb6, 0x85, 0xbd, 0x86, 0x96, 0xc8, 0x5a, 0xac, 0xbd, 0x5e, 0x70, 0x68, 0xa5, 0xd3, 0x4a, 0x9, 0xf8, 0xd1, 0x1f, 0x9a, 0xa8, 0x16, 0xde, 0xc0, 0xa2, 0xd4, 0x89, 0x4f, 0x3b, 0xda, 0xd0, 0x64, 0x6c, 0x7c, 0x2d, 0xf8, 0x63, 0xeb, 0x67, 0xeb, 0x2b, 0x42, 0x49, 0xf9, 0x3c, 0x72, 0xc8, 0x40, 0xef, 0x8e, 0xcb, 0x47, 0x5b, 0x6f, 0x29, 0xa1, 0xb6, 0x5e, 0xe0, 0xeb, 0x17, 0x44, 0xbc, 0xff, 0xd8, 0xe6, 0x49, 0x93, 0xe7, 0x73, 0xe0, 0x28, 0x5b, 0x47, 0x58, 0x3a, 0x87, 0x64, 0x2, 0x3f, 0x5f, 0x61, 0x78, 0xcc, 0x29, 0xa5, 0xbb, 0xa5, 0xb2, 0x5e, 0xca, 0x7c, 0xcf, 0xf1, 0x9, 0xe6, 0xe5, 0xfe, 0x1c, 0x73, 0xab, 0x64, 0xdb, 0xaa, 0x21, 0xc8, 0x3a, 0xb0, 0xab, 0xed, 0x53, 0x74, 0x0, 0x5a, 0x2b, 0x8, 0xc9, 0x99, 0x18, 0x61, 0x17, 0xa9, 0x55, 0x6b, 0x71, 0x6, 0x65, 0xf4, 0x2c, 0xe1, 0x46, 0x59, 0xa6, 0xcf, 0xbc, 0x31, 0x11, 0xcf, 0x47, 0x87, 0x7, 0xef, 0x83, 0x6a, 0xf6, 0x82, 0x48, 0x92, 0xc2, 0x8f, 0x89, 0xb6, 0x65, 0xc7, 0xe3, 0xc4, 0xcf, 0xf9, 0x28, 0x90, 0xbf, 0x2, 0x96, 0xac, 0xe, 0xf9, 0x9c, 0x5c, 0x23, 0xa5, 0x7b, 0xd1, 0x33, 0xc6, 0x63, 0x4e, 0xfa, 0x16, 0xc3, 0xfb, 0x1d, 0x35, 0xbc, 0x1a, 0xc8, 0xb2, 0x40, 0x62, 0xf9, 0x7f, 0x38, 0xff, 0xbf, 0xe9, 0x95, 0x56, 0xa9, 0x1e, 0xbd, 0x49, 0x9d, 0xa4, 0x88, 0x8a, 0x48, 0x52, 0xf5, 0x13, 0x4, 0x6f, 0xa5, 0x2d, 0x37, 0x2b, 0xe5, 0x48, 0xf4, 0x2, 0xce, 0xb8, 0xf2, 0x68, 0x32, 0xa7, 0x85, 0x5b, 0xad, 0xc4, 0x96, 0x4c, 0xa8, 0xf6, 0x27, 0x5d, 0x1a, 0x56, 0x7c, 0x2, 0xeb, 0x59, 0x4f, 0xca, 0x61, 0x60, 0x3, 0xaf, 0xf2, 0x7c, 0x45, 0x4a, 0x4c, 0x81, 0xbb, 0xe5, 0x7, 0x2, 0x3, 0x1, 0x0, 0x1}

var transporter Transporter

func setupTransporter() {
	transporter = NewHTTPTransporter(config.Server, config.Tel, registrationInfo.password, config.SkipTLSCheck)
}

type Response struct {
	Status int
	Body   io.ReadCloser
}

func (r *Response) isError() bool {
	return r.Status != 200 && r.Status != 204
}

type Transporter interface {
	Get(url string) (*Response, error)
	PutJSON(url string, body []byte) (*Response, error)
	PutBinary(url string, body []byte) (*Response, error)
}

type HTTPTransporter struct {
	baseURL string
	user    string
	pass    string
	client  *http.Client
}

func dial(network, addr string) (net.Conn, error) {
	c, err := tls.Dial(network, addr, &tls.Config{InsecureSkipVerify: true})
	if err != nil {
		return c, err
	}
	connstate := c.ConnectionState()

	for _, peercert := range connstate.PeerCertificates {
		der, err := x509.MarshalPKIXPublicKey(peercert.PublicKey)
		if err != nil {
			log.Fatal(err)
		}
		// log.Printf("%#v",der)
		if bytes.Compare(der, whispherKeyPin) != 0 {
			log.Printf("%#v", der)
			log.Fatal("Key Pin Failed. Certificate is not signed with Whispher Systems Key")
		}
	}

	return c, nil
}

func NewHTTPTransporter(baseURL, user, pass string, skipTLSCheck bool) *HTTPTransporter {
	client := &http.Client{}
	if skipTLSCheck {
		client.Transport = &http.Transport{
			DialTLS: dial,
			// 	TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		}
	}

	return &HTTPTransporter{baseURL, user, pass, client}
}

func (ht *HTTPTransporter) Get(url string) (*Response, error) {
	req, err := http.NewRequest("GET", ht.baseURL+url, nil)
	req.SetBasicAuth(ht.user, ht.pass)
	resp, err := ht.client.Do(req)
	r := &Response{}
	if resp != nil {
		r.Status = resp.StatusCode
		r.Body = resp.Body
	}

	if r.isError() {
		log.Printf("GET %s %d\n", url, r.Status)
	}

	return r, err
}

func (ht *HTTPTransporter) put(url string, body []byte, ct string) (*Response, error) {
	br := bytes.NewReader(body)
	req, err := http.NewRequest("PUT", ht.baseURL+url, br)
	req.Header.Add("Content-type", ct)
	req.SetBasicAuth(ht.user, ht.pass)
	resp, err := ht.client.Do(req)
	r := &Response{}
	if resp != nil {
		r.Status = resp.StatusCode
		r.Body = resp.Body
	}

	if r.isError() {
		log.Printf("PUT %s %d\n", url, r.Status)
	}

	return r, err
}

func (ht *HTTPTransporter) PutJSON(url string, body []byte) (*Response, error) {
	return ht.put(url, body, "application/json")
}

func (ht *HTTPTransporter) PutBinary(url string, body []byte) (*Response, error) {
	return ht.put(url, body, "application/octet-stream")
}
